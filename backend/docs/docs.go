// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/github": {
            "get": {
                "description": "OAuth2 login with Github",
                "tags": [
                    "Auth"
                ],
                "responses": {}
            }
        },
        "/auth/github/callback": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "responses": {}
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "responses": {}
            }
        },
        "/streamer/:username": {
            "get": {
                "description": "Get the streamer's information",
                "tags": [
                    "Streamer"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streamer/search/:username": {
            "get": {
                "description": "Get the streamer's information",
                "tags": [
                    "Streamer"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streams/:username": {
            "get": {
                "description": "Get the live stream for the user",
                "tags": [
                    "Streams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streams/delete-key/:streamKeyId": {
            "delete": {
                "description": "Delete a stream key for a live stream",
                "tags": [
                    "Streams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream key id",
                        "name": "streamKeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streams/delete-stream/:playbackId": {
            "delete": {
                "description": "Delete the stream from the database",
                "tags": [
                    "Streams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Playback ID of the stream",
                        "name": "playbackId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streams/edit-stream/:playbackId": {
            "patch": {
                "description": "Edit the title of a live stream",
                "tags": [
                    "Streams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Playback ID of the stream",
                        "name": "playbackId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/streams/feed": {
            "get": {
                "description": "Get the feed for the home page",
                "tags": [
                    "Streams"
                ],
                "responses": {}
            }
        },
        "/streams/generate-key": {
            "get": {
                "description": "Generate a stream key for a live stream",
                "tags": [
                    "Streams"
                ],
                "responses": {}
            }
        },
        "/users": {
            "get": {
                "description": "Get the user's information",
                "tags": [
                    "Users"
                ],
                "responses": {}
            },
            "patch": {
                "description": "Update a user's information",
                "tags": [
                    "Users"
                ],
                "responses": {}
            }
        },
        "/users/follow/:username": {
            "post": {
                "description": "Follow a user",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to follow",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/users/unfollow/:username": {
            "post": {
                "description": "Unfollow a user",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to unfollow",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "WatchMe API",
	Description:      "This is the API documentation for the WatchMe application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
